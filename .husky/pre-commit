#!/bin/bash

# Directories containing Node.js projects to be linted.
node_dirs=(backend frontend)

# Command used to run a lint check.
check_command=(npm run lint-check)

# Uncomment the line below to disable linting for testing purposes.
#check_command=(pwd)

# Command used to autofix lint errors.
fix_command=(npm run lint-fix)

log() {
	echo "${0}:" "${@}" >&2
}

parse_yes_no() {
	case "${1}" in
		[yY]|[yY][eE][sS])
			echo "yes"
			;;
		[nN]|[nN][oO])
			echo "no"
			;;
		"")
			echo ""
			;;
		*)
			echo "invalid"
	esac
}

ask_yes_no() {
	local prompt="${1}"
	local default_selection="$(parse_yes_no "${2}")"

	local yn_letters
	local default_status
	case "${default_selection}" in
		yes)
			yn_letters="Y/n"
			default_status=0
			;;
		no)
			yn_letters="y/N"
			default_status=1
			;;
		*)
			log "An internal error occurred. The default selection is missing or invalid."
			exit 1
			;;
	esac

	prompt+=" [${yn_letters}] "

	if (( !interactive )); then
		log "${prompt}"
		log "stdin is not available. Using default selection '${default_selection}'."
		return "${default_status}"
	fi

	local selection
	while :; do
		read -p "${0}: ${prompt}" selection
		selection="$(parse_yes_no "${selection}")"

		case "${selection}" in
			yes)
				return 0
				;;
			no)
				return 1
				;;
			'')
				return "${default_status}"
				;;
			*)
				log "Invalid input. Please type 'y' or 'n' and press Enter."
				;;
		esac
	done
}

dir_check() {
	for dir in "${node_dirs[@]}"; do
		if ! [ -d "${dir}" ]; then
			log "Directory '${dir}' does not exist. Edit '${0}' and update the 'node_dirs' variable."
			exit 1
		fi
	done
}

unstaged_changes_check() {
	if git status --porcelain | grep -qv '^[MARC] '; then
		git status

		log "The working tree has unstaged changes. This may result in an incorrect lint check result."
		if ! ask_yes_no "Proceed with lint check anyway?" "no"; then
			log "Please resolve any merge conflicts, and stage (or stash) any unstaged changes. Then try again."
			exit 1
		fi
	fi
}

lint_check() {
	local failed_dirs=()
	for dir in "${node_dirs[@]}"; do
		log "Running lint check in '${dir}'..."
		if ! (cd "${dir}" && "${check_command[@]}"); then
			failed_dirs+=("${dir}")
		fi
	done

	if (( ${#failed_dirs[@]} == 0 )); then
		log "Lint check passed."
		return 0
	fi

	log "Lint check failed in the following directories:$(printf ' %q' "${failed_dirs[@]}")"

	if ask_yes_no "Proceed with commit anyway?" "no"; then
		return 0
	fi

	log "The lint autofix command is:$(printf ' %q' "${fix_command[@]}")"

	if ask_yes_no "Run this command in each failed directory?" "yes"; then
		for dir in "${failed_dirs[@]}"; do
			log "Running autofix command in '${dir}'..."
			(cd "${dir}" && "${fix_command[@]}")
		done

		log "Please manually fix any remaining lint errors, then stage your changes and try again."
	else
		log "Please fix the lint errors, then stage your changes and try again."
	fi

	return 1
}

cancel() {
	>&2 echo
	log "Lint check canceled."
	exit 0
}

main() {
	trap cancel SIGINT
	log "Starting lint check. Use Ctrl+C to skip."

	interactive=1
	if ! exec < /dev/tty; then
		log "Cannot open stdin. Disabling interactive prompts."
		interactive=0
	fi

	dir_check
	unstaged_changes_check
	lint_check
}

main "${@}"
